#! /usr/bin/python
# -*- encoding:utf-8 -*-

import logging
import re
import my_utils
from base_parse import BaseParse
from lxml import etree
from items import Item


# "http://news.cnstock.com/industry/sid_rdjj/"
class Cnstock1(BaseParse):
    # url = "http://news.cnstock.com/industry/sid_rdjj/"
    def _parse(self, raw_html):
        root = etree.HTML(raw_html)
        mainlist = root.xpath("//div[@class='main-content']/ul/li[not(@class='line')]")
        for li in mainlist:
            item = Item()
            url = "".join(li.xpath("./a/@href"))
            item.set('url', url)
            if url[-1]=='m': # http://news.cnstock.com/industry,rdjj-201801-1234567.htm
                item.set('status', 1)
                nid_match = re.match(r".*-(\d*)-(\d*)\.htm", url)
                if nid_match:
                    item.set('nid', nid_match.group(1) + nid_match.group(2))
            else: # http://news.cnstock.com/theme,2018.html
                item.set('status', -1)
                nid_match = re.match(r".*,(\d*)\.html", url)
                if nid_match:
                    item.set('nid', nid_match.group(1))
            item.set('title', "".join(li.xpath("./a/@title")))
            times = "".join(li.xpath("./span/text()"))
            item.set('timestamp', my_utils.get_timestamp(times))
            self._add_to_data(item)


# "http://news.cnstock.com/bwsd/"
class Cnstock2(BaseParse):
    def _parse(self, raw_html):
        root = etree.HTML(raw_html)
        # mainlist = root.xpath("/html/body//ul[@id='bw-list']//div[contains(@class,'title')]")
        lines = root.xpath("//ul[@id='bw-list']/li")
        # print lines
        for sub in lines:
            item = Item()
            item.set('url', "".join(sub.xpath("./p/a/@href")))
            item.set('status', 1)
            nid_match = re.match(r".*/(\d{6})/(\d+)\.htm$", item.url)
            if nid_match:
                item.set('nid', nid_match.group(1) + nid_match.group(2))
            else:
                # item.set('nid', my_utils.get_hash_nid(item.url))
                nid_match = re.match(r".*-(\d{6})-(\d+)\.htm$", item.url)
                item.set('nid', nid_match.group(1) + nid_match.group(2))
            # print item.url
            # print item.get("nid")
            item.set('title', "".join(sub.xpath("./p/a/@title")))
            times = "".join(sub.xpath("./p[@class='time']/text()"))
            item.set('timestamp', my_utils.get_timestamp(times))
            # font = sub.xpath("./a/font")
            # item.set('score', 1 if len(font)>0 else 0)
            self._add_to_data(item)

class Cnstock3(BaseParse):
    "http://news.cnstock.com/theme/index.html"
    def _parse(self, raw_html):
        raw_json_data = my_utils.get_special_json_data(raw_html)
        for sub_item in raw_json_data:
            item = Item()
            item.set('nid', sub_item.get('id'))
            item.set('url', u'http://news.cnstock.com/theme,%s.html' %item.nid)
            item.set('status', 1)
            item.set('timestamp', my_utils.get_timestamp(sub_item.get('datetime')))
            item.set('title', sub_item.get('title'))
            item.set('content', sub_item.get('des'))
            item.set('sectors', ','.join(sector.get('name') for sector in sub_item.get('xgbk',[])))
            item.set('stocks', ','.join(stock.get('code','')[2:] for stock in sub_item.get('xggg',[])))
            self._add_to_data(item)

#
# class Cnstock4(BaseParse):
#     """http://news.cnstock.com/gdxw"""
#
#     def _parse(self, raw_html):
#         root = etree.HTML(raw_html)
#         lines = root.xpath("//ul[@class='cn-list']/li")
#         print "lines", len(lines)
#         for li in lines:
#             if li.get("class") == "dashed_line":
#                 continue
#             # print "li"
#             item = Item()
#             url = "".join(li.xpath("./a/@href"))
#             nid_match = re.match(r".*/(\d{5,30})\.shtml", url)
#             if nid_match:
#                 print "match"
#                 nid = nid_match.group(1)
#             else:
#                 continue
#             title = "".join(li.xpath("./a/text()"))
#             # print title
#             # abstract = "".join(li.xpath("./a/div[2]//p/text()"))
#             time_text = "".join(li.xpath("./span/text()"))
#             # print time_text
#             status = 1
#             item.set("nid", nid)
#             item.set("title", title)
#             item.set("url", url)
#             item.set("status", status)
#             # item.set("abstract", abstract)
#             item.set('timestamp', my_utils.get_timestamp(time_text))
#             self._add_to_data(item)


if __name__ == "__main__":
    pass
