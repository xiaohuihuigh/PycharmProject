# -*- coding:utf-8 -*-
# 用途： 网易解析
# 创建日期: 18-8-21 下午7:47

import time
import logging
import re
import my_utils
from base_parse import BaseParse
from lxml import etree
from items import Item
from six.moves.urllib.parse import urljoin


class P1631(BaseParse):
    """http://tech.163.com/special/gd2014/"""

    def _parse(self, raw_html):
        root = etree.HTML(raw_html)
        lines = root.xpath("//ul[contains(@class, 'newsList')]/li")
        # print "lines", len(lines)
        for li in lines:
            # print "li"
            item = Item()
            url = "".join(li.xpath("./div[1]/h3/a/@href"))
            nid_match = re.match(r".*/(\w{5,30})\.html", url)
            if nid_match:
                # print "match"
                nid = nid_match.group(1)
                nid = my_utils.get_hash_nid(nid)
            else:
                continue
            title = "".join(li.xpath("./div[1]/h3/a/text()"))
            # print title
            abstract = "".join(li.xpath("./div[2]/div/p/text()"))
            time_text = "".join(li.xpath("./div[3]/p[2]/text()"))
            time_text = time_text.strip()
            # print time_text
            status = 1
            item.set("nid", nid)
            item.set("title", title)
            item.set("url", url)
            item.set("status", status)
            item.set("abstract", abstract)
            item.set('timestamp', my_utils.get_timestamp(time_text))
            self._add_to_data(item)


class P1632(BaseParse):
    """http://money.163.com/special/00251LK6/qqgushi.html
    未完成,新页面为动态页面
    """

    def _parse(self, raw_html):
        root = etree.HTML(raw_html)
        lines = root.xpath("//ul[contains(@class, 'list_text')]/li")
        # print "lines", len(lines)
        for li in lines:
            # print "li"
            item = Item()
            url = "".join(li.xpath("./span/a/@href"))
            nid_match = re.match(r".*/(\w{5,30})\.html", url)
            if nid_match:
                # print "match"
                nid = nid_match.group(1)
                nid = my_utils.get_hash_nid(nid)
            else:
                continue
            title = "".join(li.xpath("./span/a/text()"))
            # print title
            # abstract = "".join(li.xpath("./div[2]/div/p/text()"))
            time_text = "".join(li.xpath("./span[2]/text()"))
            time_text = time_text[1:-1]
            # print time_text
            status = 1
            item.set("nid", nid)
            item.set("title", title)
            item.set("url", url)
            item.set("status", status)
            # item.set("abstract", abstract)
            item.set('timestamp', my_utils.get_timestamp(time_text))
            self._add_to_data(item)


class P1633(BaseParse):
    """http://auto.163.com/special/gongsixinwen/"""

    def _parse(self, raw_html):
        root = etree.HTML(raw_html)
        lines = root.xpath("//ul[@class='lst']/li")
        # print "lines", len(lines)
        for li in lines:
            # print "li"
            item = Item()
            url = "".join(li.xpath("./a/@href"))
            nid_match = re.match(r".*/(\w{5,30})\.html", url)
            if nid_match:
                # print "match"
                nid = nid_match.group(1)
                nid = my_utils.get_hash_nid(nid)
            else:
                continue
            title = "".join(li.xpath("./a/text()"))
            # print title
            # abstract = "".join(li.xpath("./div[2]/div/p/text()"))
            time_text = "".join(li.xpath("./span/text()"))
            # print time_text
            status = 1
            item.set("nid", nid)
            item.set("title", title)
            item.set("url", url)
            item.set("status", status)
            # item.set("abstract", abstract)
            item.set('timestamp', my_utils.get_timestamp(time_text))
            self._add_to_data(item)


if __name__ == "__main__":
    start_t = time.time()

    pass

    print("use time: %s" % (time.time() - start_t))
